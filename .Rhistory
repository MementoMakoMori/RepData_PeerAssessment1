sample.draw <- (runif(100, 1, 50))
sampleDist[i] <- mean(sample.draw)
}
sampleDist.scaled <- scale(sampleDist)
hist(sampleDist.scaled, freq=FALSE, xlim=c(-3, 3), main="Part (b)")
curve(dnorm(x, 0, 1), col="RED", add=TRUE)
mean(sampleDist)
sd(sampleDist)
####################
#Part c
iter <- 500
sampleDist <- rep(0, iter)
for(i in 1:iter) {
sample.draw <- (runif(1000, 1, 50))
sampleDist[i] <- mean(sample.draw)
}
sampleDist.scaled <- scale(sampleDist)
hist(sampleDist.scaled, freq=FALSE, xlim=c(-3, 3), main="Part (c)")
curve(dnorm(x, 0, 1), col="RED", add=TRUE)
mean(sampleDist)
sd(sampleDist)
student.survey <- read.csv(file = "http://www.stat.ufl.edu/~aa/social/csv_files/student.survey.csv")
student.survey <- read.csv(file = "http://www.stat.ufl.edu/~aa/social/csv_files/student-survey.csv")
table(student.survey$pi)
model <- lm(pi ~ re, data = student.survey)
summary(model)
model2 <- lm(pi ~ re + ge, data = student.survey)
summary(model2)
table(student.survey$ge)
paint.price <- c(10, 8, 5, 4, 10, 7, 6)
county.crime <- read.csv(file = "statewide-crime-2.csv")
county.crime <- read.csv(file = "Documents/Take5 Year/PSC200/statewide-crime-2.csv")
county.crime <- read.csv(file = "C://Documents/Take5 Year/PSC200/statewide-crime-2.csv")
county.crime <- read.csv(file = "C://Becca/Documents/Take5 Year/PSC200/statewide-crime-2.csv")
county.crime <- read.csv(file = "statewide-crime-2.csv")
county.crime <- read.csv(file = "statewide-crime-2.csv")
county.crime <- read.csv(file = "statewide-crime-2.csv")
student.survey <- read.csv(file = "http://www.stat.ufl.edu/~aa/social/csv_files/statewide-crime-2.csv")
student.survey <- read.csv(file = "
student.survey <- read.csv(file = "http://www.stat.ufl.edu/~aa/social/csv_files/fl-crime.csv")
student.survey <- read.csv(file ="http://www.stat.ufl.edu/~aa/social/csv_files/fl-crime.csv")
help(student.survey)
help(fl-crime.csv)
help(read.csv)
fl.crime <- read.csv(file ="http://www.stat.ufl.edu/~aa/social/csv_files/fl-crime.csv")
table(fl.crime)
print(fl.crime$rownames)
fl.crime$row.names
fl.crime(row.names)
rownames(fl.crime)
colnames(fl.crime)
stem(C)
stem($C)
stem(fl.crime$C)
crime <- (fl.crime$C)
stem(crime)
urban <- (fl.crime$U)
stem(urban)
stem(as.numeric(C))
as.numeric(crime)
stem(as.numeric(crime))
stem(as.numeric(crime), urban)
help(stem())
help(stem)
fl.crime <- read.csv(file ="http://www.stat.ufl.edu/~aa/social/csv_files/fl-crime.csv")
colnames(fl.crime)
crime <- (fl.crime$C)
stem(crime)
stem(as.numeric(crime))
stem(as.numeric(crime))
crime <- as.numeric(crime)
stem(crime)
help(lm)
urban <- (fl.crime$U)
flmodel <- lm(crime ~ urban, data = fl.crime)
summary(flmodel)
summary(model2)
summary(model)
summary(flmodel)
flmodel <- lm(urban ~ crime, data = fl.crime)
summary(flmodel)
flmodel <- lm(crime~urban, data = fl.crime)
summary(flmodel)
crime <- as.numeric(fl.crime$C)
crime
crime <- as.numeric(level(fl.crime$C)
crime
crime <- as.numeric(levels(fl.crime$C)
crime
crime <- fl.crime$C
crime <- as.numeric(levels(crime)[crime])
crime
stem(Crime)
stem(crime)
fl.crime <- read.csv(file ="http://www.stat.ufl.edu/~aa/social/csv_files/fl-crime.csv")
colnames(fl.crime)
crime <- fl.crime$C
crime <- as.numeric(levels(crime)[crime])
stem(crime)
fl.model <- lm(crime ~ urban, data = fl.crime)
summary(fl.model)
help(stem)
stem(crime, scale = 1)
stem(crime, scale = 0.5)
stem(crime, scale = 2)
help(lm)
fl.model <- lm(crime ~ urban, data = fl.crime)
summary(fl.model)
fl.model <- lm(urban ~ crime, data = fl.crime)
urban <- fl.crime$U
fl.model <- lm(crime ~ urban, data = fl.crime)
summary(fl.model)
boxplot(crime)
county.data <- read.csv(file ="538-replication-data(3).csv")
county.data <- read.csv(file ="Take5 Year\PSC200\538-replication-data(3).csv")
county.data <- read.csv(file ="~/Take5 Year/PSC200/538-replication-data(3).csv")
county.data <- read.csv(file ="~/Take5 Year/PSC200/538-replication-data(3).csv")
table(county.data$county)
table(county.data$county$education)
table(county.data$county,$education)
table(county.data$county,county.data$education)
college <- county.data$education
clinton <- coutny.data$dem_2016
clinton <- county.data$dem_2016
trump <- county.data$rep_2016
obama <- county.data$dem_2012
romney <- county.data$rep_2012
table(county.data$dem_2012)
obama <- county.data$dem_2012
romney <- county.data$rep_2012
obama <- county.data$dem_2012
romney <- county.data$rep_2012
obama <- county.data$dem_2012
table(county.data$rep_2016)
trump <- (100 - county.data$dem_2016)
trump <- (100.00 - county.data$dem_2016)
romney <- (100.00 - county.data$dem_2012)
table(county.data$margin_2016)
table(county.data$margin_2016)
table(county.data$y)
y <- county.data$y
county.data <- read.csv(file ="~/Take5 Year/PSC200/538-replication-data(3).csv")
table(county.data$margin_2016)
table(county.data$y)
y <- county.data$y
college <- county.data$education
income <- county.data$income
model <- lm(y ~ college, data=county.data)
delete(model)
help(delete)
??delete
model.election <- model
summary(model.election)
model2.election <- lm(y ~ college + income, data=county.data)
summary(model2.election)
change.dem <- county.data$dem_2016 - county.data$dem_2012
mean(change.dem)
change.rep <- county.data$rep_2016 - county.data$rep_2012
mean(change.rep)
margin_2012
mean(county.data$margin_2012)
rep_2012 <- y - county.data$dem_2012
rep_2012 <- y - county.data$margin_2012
rep_2016 <- y - county.data$margin.2016
change.rep <- rep_2016 - rep_2012
mean(change.rep)
mean(margin_2012)
mean(county.data$margin_2012)
mean(county.data$margin_2016)
print(gop_2012)
print(county.data$gop_2012)
top.ed <- c(max(county.data$education), n=50)
county.data <- read.csv(file ="~/Take5 Year/PSC200/538-replication-data(3).csv")
y <- county.data$y
college <- county.data$education
income <- county.data$income
model.election <- lm(y ~ college, data=county.data)
summary(model.election)
model2.election <- lm(y ~ college + income, data=county.data)
summary(model2.election)
change.dem <- county.data$dem_2016 - county.data$dem_2012
mean(change.dem)
top.ed <- c(max(county.data$education), n=50)
top.ed <- c(max(county.data$education), 50)
help(max)
top.ed <- c(pmax(county.data$education), 50)
top.ed <- c(pmax(county.data$education)
summary(county.data$education)
summary(county.data$education)
top.edu <- c(county.data$education > 45)
)
top.edu <- c(for(i in 1:50) {
if (county.data$education) > 45,
returnvalue()
}
)
top.edu <- for(i in 1:50) {
if (county.data$education) > 45,
returnvalue()
}
summary(county.data$education)
top.edu <- for(i in 1:50) {
if (county.data$education) > 45
returnvalue
}
}
top.edu <- for(i in 1:50) {
if (county.data$education) >= 45
c(county.data$education)
}
}
}
help(if)
help(if)
??if
top.edu <- if (county.data$education >= 45) {c(county.data$education)}
top.edu <- if (county.data$education >= 45) {c(county.data$education)}
top.edu <- if (county.data$education(i) >= 45) {c(county.data$education)}
i = length(county.data)
top.edu <- if (county.data$education[i] >= 45) {c(county.data$education)}
county.data <- read.csv(file ="~/Take5 Year/PSC200/538-replication-data(3).csv")
y <- county.data$y
college <- county.data$education
income <- county.data$income
model.election <- lm(y ~ college, data=county.data)
summary(model.election)
model2.election <- lm(y ~ college + income, data=county.data)
summary(model2.election)
model3 <- lm(income ~ college, data=county.data)
summary(model3)
model4 <- lm(college ~ income, data=county.data)
summary(model4)
top.edu <- county.data[rev(order(county.data$education)), "county"][1:50]
astable(top.edu)
table(top.edu)
top.edu <- county.data[order(county.data$education), "county"][1:50]
table(top.edu)
table(top.edu)
top.edu <- county.data$education[order(county.data$education), "county"][1:50]
table(top.edu)
library(data.table)
county.data<-data.table(county.data)
plot(model.election)
help(plot)
plot(model.election. type=b)
plot(model.election, type=b)
plot(model.election, type="b")
plot(model.election)
??scatterplot
plot(college, y, type="p", main="Education and Margin of Votes for Clinton", xlab = "% of population with college degree", ylab = "margin of votes for Clinton over Trump")
county.data <- read.csv(file ="~/Take5 Year/PSC200/538-replication-data(3).csv")
y <- county.data$y
college <- county.data$education
income <- county.data$income
model.election <- lm(y ~ college, data=county.data)
summary(model.election)
model2.election <- lm(y ~ college + income, data=county.data)
summary(model2.election)
plot(model2.election)
help(summary)
help(summary.lm)
summary(model2.election)$correlation
summary(model2.election$correlation)
summary(model2.election)
model3.election <- lm(y income + college, data=county.data)
model3.election <- lm(y ~ income + college, data=county.data)
summary(model3.election)
install.packages("KernSmooth")
search(KernSmooth)
search("KernSmooth")
library(KernSmooth)
search()
clear()
clear
swirl()
swirl
swirl::main
library("swirl")
swirl()
library("swirl")
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
list,files()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
play()
file.path
file.path()
nxt()
file.path(folder1, folder2)
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2", testdir3), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
bye()
install.packages("installr")
library(installr)
updateR()
library(swirl)
installed.packages()
install.packages(swirl)
library("swirl")
install.packages("swirl")
install.packages("ggplot2")
install.packes("jpeg")
install.packages("jpeg")
install.packages("data.frame")
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col='blue')
abline(h=12)
hist(ppm, col='green')
rug(ppm)
low
hgih
high
hist(ppm, col='green', breaks=100)
rug(ppm)
hist(ppm, col='green')
abline(v=12, lwd=2)
abline(v=median(ppm), col='magenta', lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col='wheat', main="Number of Counties in Each Region")
boxplot(pm25 ~ region, pollution, col='red')
par(mfrow=c(2,1), mar=c(4,4,2,1))
subset(pollution, region=='east')
east <0 subset(pollution,region=="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col="green")
hist(pollution$pm25 && pollution$region=="west", col="green")
hist(subset(pollution$pm25 && pollution$region=="west"), col='green')
hist(subset(pollution$pm25, which(pollution$west=="west")), col='green')
hist(subset(pollution$pm25, which(pollution$region=="west")), col='green')
hist(subset(pollution, which(pollution$pm25 && pollution$region="west")), col='green')
hist(subset(pollution, which(pollution$pm25 && pollution$region=="west")), col='green')
hist(pollution$pm25 which(pollution$region=="west"), col="green")
hist(pollution$west$pm25, col="green")
hist(pollution[[pollution[[,region]]=="west", pm25]], col = 'green')
hist(pollution[[pollution[[,"region""]]=="west", "pm25""]], col = 'green')
hist(pollution[[pollution[[,"region"]]=="west", "pm25"]], col = 'green')
names(pollution)
hist(pollution[[pollution[[,3]]=="west", pm25]], col = 'green')
hist(pollution[[pollution[[,3]]=="west", "pm25""]], col = 'green')
hist(pollution[[pollution[[,3]]=="west", "pm25""]], col = 'green')
hist(pollution[[pollution[[,3]]=="west", "pm25"]], col = 'green')
hist(subset(pollution$pm25, which(pollution$region=="west")), col = 'green')
hist(subset(pollution$pm25, region=='west'), col="green")
hist(subset(pollution$pm25, pollution$region=='west'), col = 'green')
hist(subset(pollution, region=="west")$pm25, col == 'green')
hist(subset(pollution, region=="west")$pm25, col = 'green')
with(pollution, plot(latitude ~ pm25))
with(pollution, plot(latitude, pm25))
abline(h=12)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region=='west')
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
library(swirl)
swirl()
swirl()
swirl()
install_course("R Programming")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, range)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, lfags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
install.packages("knitr")
library("knitr", lib.loc="~/R/win-library/3.5")
library("swirl")
swirl()
install_from_swirl("Statistical Inference")
###R Code for RepData Peer Assessment Report
library(ggplot2)
library(dplyr)
##read data
data <- read.csv("activity.csv")
#version without NA values
edit <- subset(data, is.na(data$steps) == FALSE)
getwd()
setwd("./Work/Course5/RepData")
###R Code for RepData Peer Assessment Report
library(ggplot2)
library(dplyr)
##read data
data <- read.csv("activity.csv")
#version without NA values
edit <- subset(data, is.na(data$steps) == FALSE)
means_int(aggregate(edit$steps, list(Interval=edit$interval), mean))
means_int <- aggregate(edit$steps, list(Interval=edit$interval), mean)
plot(data = means_int, type = "l")
plot(x=means_int$Interval, y=means_int$x, type = "l")
g< - ggplot(means_int, aes(x=Interval, y=x, type = "l"))
?plot
g <- ggplot(means_int, aes(x=Interval, y=x, type = "l"))
g
plot(x=means_int$Interval, y=means_int$x, type = "b")
g <- ggplot(means_int, aes(x = Interval, y = x, col = means_int$x))
plot(g + geom_col() + guides(col = FALSE) +
labs(title = "Mean Steps per Interval", x = "5 Minute Interval", y = "Mean Steps") +
geom_vline(xintercept = means_int[which(means_int$x==max(means_int$x)), "Interval"], col = "yellow", size = 2, linetype = "dashed") +
annotate("text", x = 1500, y = 175, label = paste("Max Mean:", max(means_int$x), collapse = " "))
)
check <- as.factor(edit$interval)
levels(check)
plot(g + geom_line() + guides(line = FALSE) +
labs(title = "Mean Steps per Interval", x = "5 Minute Interval", y = "Mean Steps") +
geom_vline(xintercept = means_int[which(means_int$x==max(means_int$x)), "Interval"], col = "yellow", size = 2, linetype = "dashed") +
annotate("text", x = 1500, y = 175, label = paste("Max Mean:", max(means_int$x), collapse = " "))
)
paste("Interval with Highest Average Steps:", max(means_int), collapse = " ")
g <- ggplot(means_int, aes(x = Interval, y = x))
plot(g + geom_line() + guides(line = FALSE) +
labs(title = "Mean Steps per Interval", x = "5 Minute Interval", y = "Mean Steps") +
geom_vline(xintercept = means_int[which(means_int$x==max(means_int$x)), "Interval"], col = "yellow", size = 2, linetype = "dashed") +
annotate("text", x = 1500, y = 175, label = paste("Max Mean:", max(means_int$x), collapse = " "))
)
means_int[1,max(means_int$x)]
means_int[max(means_int$x), 1]
max(means_int$x)
means_int[100:150,]
means_int[206,]
means_int[which(x==max(means_int$x)), 1]
means_int[which("x"==max(means_int$x)), 1]
means_int["x"==max(means_int$x), 1]
means_int[x==max(means_int$x), 1]
means_int[x=max(means_int$x), 1]
means_int["x"=max(means_int$x), 1]
means_int[means_int[max(x)], 1]
means_int[means_int[max(means_int$x)], 1]
means_int[means_int[max(means_int$x),], 1]
?which
means_int[which("x"==max(means_int$x)), 1]
means_int[which(means_int$x==max(means_int$x)), 1]
